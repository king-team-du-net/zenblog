security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        database_users:
            entity: { class: App\Entity\User, property: email }

    firewalls:
        # image_resolver:
            # pattern: ^/media/cache/resolve
            # security: false

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: database_users
            # entry_point: App\Security\AuthenticationEntryPoint
            # user_checker: App\Security\UserChecker
            custom_authenticator: 
                - App\Security\Authenticator
            logout:
                path: auth_logout
                target: homepage
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800
                path: /
            switch_user: { role: ROLE_ADMINISTRATOR }
            # access_denied_handler: App\Security\AccessDeniedHandler

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: '^/(%locales%)/%website_dashboard_path%/editor', roles: ROLE_EDITOR }
        # - { path: '^/(%locales%)/%website_dashboard_path%/admin', roles: ROLE_ADMIN }
        # - { path: '^/(%locales%)/%website_dashboard_path%/administrator', roles: ROLE_ADMINISTRATOR }
        # - { path: '^/(%locales%)/%website_dashboard_path%/user', roles: ROLE_USER }


    # The ROLE_EDITOR role inherits from the ROLE_USER role
    # The ROLE_ADMIN role inherits from the ROLE_USER ROLE_EDITOR role
    # The ROLE_SUPER_ADMIN role inherits from the ROLE_ADMIN role
    # The ROLE_ADMINISTRATOR role inherits from the ROLE_SUPER_ADMIN role
    role_hierarchy:
        ROLE_EDITOR:
            - ROLE_USER
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_EDITOR
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH
        ROLE_ADMINISTRATOR: 
            - ROLE_SUPER_ADMIN

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
